{"componentChunkName":"component---src-templates-doc-template-js","path":"/docs/using-appsody/installing-knative-locally/","webpackCompilationHash":"cf12721aeadb98466812","result":{"data":{"markdownRemark":{"html":"<h2 id=\"setting-up-knative-serving-for-local-kubernetes-development\"><a href=\"#setting-up-knative-serving-for-local-kubernetes-development\" aria-label=\"setting up knative serving for local kubernetes development permalink\" class=\"header-link-icon\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Setting up Knative Serving for Local Kubernetes Development</h2>\n<p>In order to work with Kubernetes locally, it is recommended that you enable Kubernetes in Docker for Desktop. To do that, first make sure that Docker is running by running the Docker app which launches Docker and adds the Docker icon to the menu bar.</p>\n<p>Select the Docker icon in the Menu bar, click <strong>Preferences</strong> and select the <strong>Kubernetes</strong> tab. Here select the <strong>Enable Kubernetes</strong> checkbox and click <strong>Apply</strong>.</p>\n<p>Click <strong>Install</strong> on the dialog box asking, “Install the Kubernetes Cluster now?” to start the install. When it’s complete it will have installed Kubernetes along with the <code>kubectl</code> command line tool which <code>appsody</code> will use to deploy your applications.</p>\n<p>Next ensure that Kubernetes has enough resources to run your apps by selecting the Docker icon in the Menu bar, click <strong>Preferences</strong> and select the <strong>Advanced</strong> tab. Use the sliders to ensure that you have <strong>6 CPUs</strong> and <strong>8.0 GiB</strong> of memory assigned to Kubernetes and click <strong>Apply &#x26; Restart</strong>.</p>\n<p>You can now use the following commands to install Knative Serving 0.7.1 (currently the latest version) and its Istio dependency using the following commands:</p>\n<ol>\n<li>\n<p>Install Istio:</p>\n<pre><code class=\"language-sh\">curl -L https://raw.githubusercontent.com/knative/serving/v0.5.2/third_party/istio-1.0.7/istio.yaml \\ | kubectl apply --filename -\n</code></pre>\n<p>Next, label the default namespace with <em>istio-injection=enabled</em> using the following .</p>\n<pre><code class=\"language-sh\">kubectl label namespace default istio-injection=enabled\n</code></pre>\n</li>\n<li>\n<p>Verify the STATUS of the Istio components:</p>\n<pre><code class=\"language-sh\">kubectl get pods --namespace istio-system --watch\n</code></pre>\n<p>Once all of the components have reached <code>Running</code> or <code>COMPLETED</code> you can stop watching the status using <code>Ctrl-C</code>.</p>\n</li>\n<li>\n<p>Install Knative Serving 0.7.1:</p>\n<pre><code class=\"language-sh\">curl -L https://github.com/knative/serving/releases/download/v0.7.1/serving.yaml \\ | kubectl apply --selector networking.knative.dev/certificate-provider!=cert-manager --filename -\n</code></pre>\n</li>\n<li>\n<p>Verify the STATUS of the Knative Serving components:</p>\n<pre><code class=\"language-sh\">kubectl get pods --namespace knative-serving --watch\n</code></pre>\n<p>Once all of the components have reached <code>Running</code> you can stop watching the status using <code>Ctrl-C</code>.</p>\n</li>\n<li>\n<p>Edit the <code>config-deployment</code> config map to enable the use of the local Docker Cache:</p>\n<pre><code class=\"language-sh\">kubectl edit -n knative-serving cm config-deployment\n</code></pre>\n<p>Add <code>registriesSkippingTagResolving: \"dev.local\"</code> under <code>data</code> so that the top of your file becomes:</p>\n<pre><code class=\"language-sh\">apiVersion: v1\ndata:\n  registriesSkippingTagResolving: \"dev.local\"\n</code></pre>\n<p>and use <code>ESCAPE</code> followed by <code>:wq</code> to save your changes.</p>\n</li>\n<li>\n<p>Discover the \"nip.io\" address for your local machine. This will be your machine's IPV4/inet address appended with \".nip.io\" </p>\n<p> For example, if your local IPV4/inet address is: <code>9.174.18.28</code> then your \"nip.io\" address is: <code>9.174.18.28.nip.io</code></p>\n<p> To find your IPV4/inet address on linux/mac use:</p>\n<pre><code class=\"language-sh\">ifconfig | grep \"inet \"\n</code></pre>\n<p>   For Windows use:</p>\n<pre><code class=\"language-sh\">ipconfig | find \"IPv4\"\n</code></pre>\n<p>   This will print an IP address that you will use to set a config domain in the next step.</p>\n</li>\n<li>\n<p>Edit your <code>config-domain</code> config map to set up the use of your \"nip.io\" domain:</p>\n<pre><code class=\"language-sh\">kubectl edit cm config-domain -n knative-serving\n</code></pre>\n<p>Add and entry under <code>data</code> for your \"nip.io\" address so that the top of your file is similar to:</p>\n<pre><code class=\"language-sh\">apiVersion: v1\ndata:\n  9.174.18.28.nip.io: \"\"\n</code></pre>\n<p>and use <code>ESCAPE</code> followed by <code>:wq</code> to save your changes.</p>\n<p>  If your local machine's IP address changes you will need to repeat the previous two steps to find the new ip and change the config map.</p>\n</li>\n</ol>\n<p>You should now have Knative Serving installed in your Docker for Desktop based Kubernetes cluster.</p>","frontmatter":{"title":"Setting up Knative Serving for Local Kubernetes Development"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"pagePath":"/docs/using-appsody/installing-knative-locally/"}}}