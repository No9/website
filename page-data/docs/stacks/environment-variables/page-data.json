{"componentChunkName":"component---src-templates-doc-template-js","path":"/docs/stacks/environment-variables/","webpackCompilationHash":"361859d25c776326d1eb","result":{"data":{"markdownRemark":{"html":"<h1 id=\"appsody-environment-variables\"><a href=\"#appsody-environment-variables\" aria-label=\"appsody environment variables permalink\" class=\"header-link-icon\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Appsody Environment Variables</h1>\n<p>Stack creators configure Appsody environment variables to specify the behaviour they expect from the stack throughout the application development lifecycle. These variables are defined in <code>Dockerfile-stack</code> for the stack image. <code>Appsody CLI</code> and <code>Appsody controller</code> inspect these environment variables and then drive the expected behaviour for the developer.</p>\n<p>If a stack image is built upon another stack's image, it will inherit all the Appsody variables from the base stack. It can override the variables it wants to change. This allows users to create stacks with slightly different behaviour while still getting updates from the base stack.</p>\n<p>The following are the currently supported Appsody environment variables and their default values:</p>\n<table>\n<thead>\n<tr>\n<th>Variable</th>\n<th>Description</th>\n<th>Example</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>APPSODY_WATCH_DIR</code></td>\n<td>This variable contains the directories to watch for changes in. There can be multiple directories separated by a ';'. The format is dir1;dir2. If APPSODY_WATCH_DIR is not set, the value of <code>APPSODY_MOUNTS</code> is used instead to define the directories to watch.</td>\n<td><code>ENV APPSODY_WATCH_DIR=/project/user-app</code></td>\n<td>APPSODY_MOUNTS</td>\n</tr>\n<tr>\n<td><code>APPSODY_WATCH_INTERVAL</code></td>\n<td>This is the watch interval (in seconds). This is optional.</td>\n<td><code>APPSODY_WATCH_INTERVAL = 3</code></td>\n<td>2 seconds</td>\n</tr>\n<tr>\n<td><code>APPSODY_WATCH_REGEX</code></td>\n<td>This is a regex expression that describes which files are watched for changes. The controller uses the go <code>regexp</code> package, which does not support negative look ahead matching (For example: ignore patterns).  The APPSODY_WATCH_REGEX is used to match the filename or the leaf directory, not the full path.</td>\n<td><code>ENV APPSODY_WATCH_REGEX=\"^.*.js$\"</code></td>\n<td><code>\"(^.*.java$)|(^.*.js$)|(^.*.go$)\"</code></td>\n</tr>\n<tr>\n<td><code>APPSODY_WATCH_IGNORE_DIR</code></td>\n<td>This variable contains the directories to ignore any changes in. There can be multiple directories separated by a ';'. The format is dir1;dir2.</td>\n<td><code>ENV APPSODY_WATCH_IGNORE_DIR=/project/user-app/node_modules</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_MOUNTS</code></td>\n<td>This variable contains the mount directories, which can alternatively be used as watch directories if no value exists for  <code>APPSODY_WATCH_DIR</code>.              There can be multiple mount directories separated by a';'. The format is :/.</td>\n<td><code>ENV APPSODY_MOUNTS=/:/project/user-app</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_DEPS</code></td>\n<td>This variable is used to cache the combined dependencies of the stack components and the user application. It is not mounted into the user directory as it is not required outside the Docker environment.</td>\n<td><code>ENV APPSODY_DEPS=/project/deps</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_PREP</code></td>\n<td>This is an optional command executed before the <code>APPSODY_RUN/TEST/DEBUG</code> commands are run. This command should only be used to perform prerequisite checks or preparation steps prior to starting the app server. If this command fails, <code>APPSODY_RUN/TEST/DEBUG</code> will not be executed and the appsody container will be terminated. It is not recommended to perform code compilation tasks in <code>APPSODY_PREP</code> because compilation errors can typically be fixed and recovered while the container is running with the <code>APPSODY_RUN/TEST/DEBUG</code> and <code>ON_CHANGE</code> commands. Unlike those commands, <code>APPSODY_PREP</code> will only be run once and never retried. Note: <code>APPSODY_INSTALL</code> is deprecated and has been replaced with <code>APPSODY_PREP</code></td>\n<td><code>ENV APPSODY_PREP=\"npm install --prefix user-app\"</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_RUN</code></td>\n<td>This is the command run for the server process after the <code>APPSODY_PREP</code> command, when the mode is 'run'. If your command involves complex environment variable expansions, it may be better to encapsulate your command into a script.</td>\n<td><code>ENV APPSODY_RUN=\"npm start\"</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_RUN_ON_CHANGE</code></td>\n<td>This is the command run when a change is detected on the file system by the controller when the mode is 'run'. When <code>APPSODY_RUN_KILL=false</code>, this action will only be used if the application launched by <code>APPSODY_RUN</code> is still running. If your command involves complex environment variable expansions, it may be better to encapsulate your command into a script. If the file watching is disabled, the value should be \"\".</td>\n<td><code>ENV APPSODY_RUN_ON_CHANGE=\"npm start\"</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_RUN_KILL</code></td>\n<td><code>APPSODY_RUN_KILL</code> is used to signal that when the mode is \"run\" the controller will kill the server process started by <code>APPSODY_RUN</code> prior to starting the watch action specified by <code>APPSODY_RUN_ON_CHANGE</code>. The values supported are true or false.</td>\n<td><code>ENV APPSODY_RUN_KILL=&#x3C;true/false></code></td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>APPSODY_DEBUG</code></td>\n<td>This is the command for the server process run after the <code>APPSODY_PREP</code> command, when the mode is 'debug'. If your command involves complex environment variable expansions, it may be better to encapsulate your command into a script.</td>\n<td><code>ENV APPSODY_DEBUG=\"npm run debug\"</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_DEBUG_ON_CHANGE</code></td>\n<td>This is the command run when a change is detected on the file system by the controller when the mode is 'debug'. When <code>APPSODY_DEBUG_KILL=false</code>, this action will only be used if the application launched by <code>APPSODY_DEBUG</code> is still running. If your command involves complex environment variable expansions, it may be better to encapsulate your command into a script. If the file watching is disabled, the value should be \"\".</td>\n<td><code>ENV APPSODY_DEBUG_ON_CHANGE=\"npm run debug\"</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_DEBUG_KILL</code></td>\n<td>This variable is used to signal that when the mode is \"debug\" the controller will kill the server process started by <code>APPSODY_DEBUG</code> prior to starting the watch action specified by <code>APPSODY_DEBUG_ON_CHANGE</code>. The values supported are true or false.</td>\n<td><code>APPSODY_DEBUG_KILL=&#x3C;true/false></code></td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>APPSODY_TEST</code></td>\n<td>This is the command to run the test cases run after the <code>APPSODY_PREP</code> command, when the mode is 'test'. If your command involves complex environment variable expansions, it may be better to encapsulate your command into a script.</td>\n<td><code>ENV APPSODY_TEST=\"npm test &#x26;&#x26; npm test --prefix user-app\"</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_TEST_ON_CHANGE</code></td>\n<td>This is the command run when a change is detected on the file system by the controller when the mode is 'test'. When <code>APPSODY_TEST_KILL=false</code>, this action will only be used if the application launched by <code>APPSODY_TEST</code> is still running. If your command involves complex environment variable expansions, it may be better to encapsulate your command into a script. If the file watching is disabled, the value should be \"\".</td>\n<td><code>ENV APPSODY_TEST_ON_CHANGE=\"\"</code></td>\n<td>N/A</td>\n</tr>\n<tr>\n<td><code>APPSODY_TEST_KILL</code></td>\n<td>This variable is used to signal that when the mode is \"test\" the controller will kill the server process started by <code>APPSODY_TEST</code> prior to starting the watch action specified by <code>APPSODY_TEST_ON_CHANGE</code>. The values supported are true or false.</td>\n<td><code>APPSODY_TEST_KILL=&#x3C;true/false></code></td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>APPSODY_PROJECT_DIR</code></td>\n<td>This variable allows override of the project directory while running  <code>appsody extract</code>, <code>appsody build</code> or <code>appsody deploy</code>.</td>\n<td><code>APPSODY_PROJECT_DIR=/&#x3C;my-project-directory></code></td>\n<td>/project</td>\n</tr>\n<tr>\n<td><code>APPSODY_USER_RUN_AS_LOCAL</code></td>\n<td>Sets the user identity within the container to match the host user’s UID. If a stack mounts a host directory, rather than a Docker volume, setting this environment variable to true ensures that files that are written to the host directory use the host user’s UID, so they can be deleted later. The values supported are true or false.</td>\n<td><code>APPSODY_USER_RUN_AS_LOCAL=&#x3C;true/false></code></td>\n<td>false</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"title":"Appsody Environment Variables"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"pagePath":"/docs/stacks/environment-variables/"}}}